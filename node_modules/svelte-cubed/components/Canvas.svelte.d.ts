/** @typedef {typeof __propDef.props}  CanvasProps */
/** @typedef {typeof __propDef.events}  CanvasEvents */
/** @typedef {typeof __propDef.slots}  CanvasSlots */
export default class Canvas extends SvelteComponentTyped<{
    alpha?: boolean;
    height?: number;
    width?: number;
    background?: THREE.Color | THREE.Texture;
    environment?: THREE.Texture;
    depth?: boolean;
    fog?: THREE.FogBase;
    overrideMaterial?: THREE.Material;
    precision?: "highp" | "mediump" | "lowp";
    powerPreference?: "default" | "high-performance" | "low-power";
    premultipliedAlpha?: boolean;
    antialias?: boolean;
    stencil?: boolean;
    preserveDrawingBuffer?: boolean;
    failIfMajorPerformanceCaveat?: boolean;
    logarithmicDepthBuffer?: boolean;
    autoClear?: boolean;
    autoClearColor?: boolean;
    autoClearDepth?: boolean;
    autoClearStencil?: boolean;
    checkShaderErrors?: boolean;
    gammaFactor?: number;
    localClippingEnabled?: boolean;
    physicallyCorrectLights?: boolean;
    outputEncoding?: number;
    clippingPlanes?: THREE.Plane[];
    shadows?: boolean | THREE.ShadowMapType;
    toneMapping?: THREE.ToneMapping;
    toneMappingExposure?: number;
    pixelRatio?: number;
    info?: () => THREE.WebGLInfo;
}, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}> {
    get info(): () => THREE.WebGLInfo;
}
export type CanvasProps = typeof __propDef.props;
export type CanvasEvents = typeof __propDef.events;
export type CanvasSlots = typeof __propDef.slots;
import * as THREE from "three";
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        alpha?: boolean;
        height?: number;
        width?: number;
        background?: THREE.Color | THREE.Texture;
        environment?: THREE.Texture;
        depth?: boolean;
        fog?: THREE.FogBase;
        overrideMaterial?: THREE.Material;
        precision?: 'lowp' | 'mediump' | 'highp';
        powerPreference?: 'default' | 'high-performance' | 'low-power';
        premultipliedAlpha?: boolean;
        antialias?: boolean;
        stencil?: boolean;
        preserveDrawingBuffer?: boolean;
        failIfMajorPerformanceCaveat?: boolean;
        logarithmicDepthBuffer?: boolean;
        autoClear?: boolean;
        autoClearColor?: boolean;
        autoClearDepth?: boolean;
        autoClearStencil?: boolean;
        checkShaderErrors?: boolean;
        gammaFactor?: number;
        localClippingEnabled?: boolean;
        physicallyCorrectLights?: boolean;
        outputEncoding?: number;
        clippingPlanes?: THREE.Plane[];
        shadows?: boolean | typeof THREE.BasicShadowMap | typeof THREE.PCFShadowMap | typeof THREE.PCFSoftShadowMap | typeof THREE.VSMShadowMap;
        toneMapping?: typeof THREE.NoToneMapping | typeof THREE.LinearToneMapping | typeof THREE.ReinhardToneMapping | typeof THREE.CineonToneMapping | typeof THREE.ACESFilmicToneMapping;
        toneMappingExposure?: number;
        pixelRatio?: number;
        info?: () => THREE.WebGLInfo;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export {};
