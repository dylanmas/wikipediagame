/** @typedef {typeof __propDef.props}  OrbitControlsProps */
/** @typedef {typeof __propDef.events}  OrbitControlsEvents */
/** @typedef {typeof __propDef.slots}  OrbitControlsSlots */
export default class OrbitControls extends SvelteComponentTyped<{
    keys?: {
        LEFT: string;
        UP: string;
        RIGHT: string;
        BOTTOM: string;
    };
    maxDistance?: number;
    touches?: {
        ONE: THREE.TOUCH;
        TWO: THREE.TOUCH;
    };
    target?: import("../../types/common").Position;
    autoRotate?: boolean;
    autoRotateSpeed?: number;
    dampingFactor?: number;
    enableDamping?: boolean;
    enabled?: boolean;
    enablePan?: boolean;
    enableRotate?: boolean;
    enableZoom?: boolean;
    keyPanSpeed?: number;
    maxAzimuthAngle?: number;
    maxPolarAngle?: number;
    maxZoom?: number;
    minAzimuthAngle?: number;
    minDistance?: number;
    minPolarAngle?: number;
    minZoom?: number;
    mouseButtons?: {
        LEFT: THREE.MOUSE;
        MIDDLE: THREE.MOUSE;
        RIGHT: THREE.MOUSE;
    };
    panSpeed?: number;
    rotateSpeed?: number;
    screenSpacePanning?: boolean;
    zoomSpeed?: number;
}, {
    start: CustomEvent<any>;
    end: CustomEvent<any>;
    change: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}> {
}
export type OrbitControlsProps = typeof __propDef.props;
export type OrbitControlsEvents = typeof __propDef.events;
export type OrbitControlsSlots = typeof __propDef.slots;
import * as THREE from "three";
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        keys?: {
            LEFT: string;
            UP: string;
            RIGHT: string;
            BOTTOM: string;
        };
        maxDistance?: number;
        touches?: {
            ONE: THREE.TOUCH;
            TWO: THREE.TOUCH;
        };
        target?: import('../../types/common').Position;
        autoRotate?: boolean;
        autoRotateSpeed?: number;
        dampingFactor?: number;
        enableDamping?: boolean;
        enabled?: boolean;
        enablePan?: boolean;
        enableRotate?: boolean;
        enableZoom?: boolean;
        keyPanSpeed?: number;
        maxAzimuthAngle?: number;
        maxPolarAngle?: number;
        maxZoom?: number;
        minAzimuthAngle?: number;
        minDistance?: number;
        minPolarAngle?: number;
        minZoom?: number;
        mouseButtons?: {
            LEFT: THREE.MOUSE;
            MIDDLE: THREE.MOUSE;
            RIGHT: THREE.MOUSE;
        };
        panSpeed?: number;
        rotateSpeed?: number;
        screenSpacePanning?: boolean;
        zoomSpeed?: number;
    };
    events: {
        start: CustomEvent<any>;
        end: CustomEvent<any>;
        change: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export {};
